@startuml
class pieces.enemies.Vampire {
- State currentState
- double ATTACK_RANGE
- int VISION_RANGE
- int ATTACK_DAMAGE
- boolean useSkill
+ <<Create>> Vampire()
+ void updateState()
+ void performAction()
- void chasePlayer()
+ void attack(BasePlayerPiece)
- void moveTowardsPlayer()
+ void extraSkill(BasePlayerPiece)
}
enum pieces.enemies.State {
+  NEUTRAL_ROAMING
+  AGGRESSIVE
}
class pieces.enemies.Bomber {
- Bomber.State currentState
- int VISION_RANGE
- int MOVE
- int BOMB_EVERY
- int counter
+ <<Create>> Bomber()
+ void attack(BasePlayerPiece)
+ void performAction()
+ void updateState()
# void move(int,int)
# void roamRandomly()
- void runAwayFromPlayer()
}
enum pieces.enemies.State {
+  NEUTRAL_ROAMING
+  RUNNING_AWAY
}
class pieces.BasePiece {
# Config.ENTITY_TYPE type
# ImageView texture
# int row
# int col
# SpriteAnimation spriteAnimation
+ ImageView animationImage
# TranslateTransition moveTransition
# int offsetX
# int offsetY
# <<Create>> BasePiece(Config.ENTITY_TYPE,ImageView,int,int)
+ Config.ENTITY_TYPE getType()
+ ImageView getTexture()
+ void setTexture(ImageView)
+ void setTextureByPath(String)
+ int getRow()
+ void setRow(int)
+ int getCol()
+ void setCol(int)
+ int getOffsetX()
+ int getOffsetY()
# void setupAnimation(String,int,int,int,int)
+ void moveWithTransition(int,int)
}
class pieces.enemies.Necromancer {
- Necromancer.State currentState
- double ATTACK_RANGE
- int VISION_RANGE
- int ATTACK_DAMAGE
- int counter
- int SUMMON_ZOMBIE_EVERY
+ <<Create>> Necromancer()
+ void updateState()
+ void performAction()
- void chasePlayer()
# void roamRandomly()
+ void attack(BasePlayerPiece)
+ void summonZombie(int,int)
+ void positionSummonZombie()
}
enum pieces.enemies.State {
+  NEUTRAL_ROAMING
+  AGGRESSIVE
}
class pieces.npcs.Dealer {
+ <<Create>> Dealer()
}
abstract class pieces.enemies.BaseMonsterPiece {
- int currentHp
- int maxHp
- int currentDirection
- boolean isAlive
# boolean endAction
# boolean[][] validMovesCache
# Random random
+ <<Create>> BaseMonsterPiece(int,int,int)
+ {abstract}void performAction()
+ {abstract}void updateState()
+ {abstract}void attack(BasePlayerPiece)
# void move(int,int)
+ void takeDamage(int)
+ void changeDirection(int)
# void roamRandomly()
# List<int[]> getValidMoves(int,int)
# boolean isValidMoveSet(int,int)
+ int getCurrentHealth()
+ void setCurrentHealth(int)
+ int getMaxHealth()
+ void setMaxHealth(int)
+ boolean isAlive()
+ void onDeath()
+ boolean isEndAction()
}
abstract class pieces.player.BasePlayerPiece {
# int currentHp
# int maxHp
# int currentActionPoint
# int maxActionPoint
# int currentMana
# int maxMana
# int attackDamage
# boolean canAct
# BaseSkill[] skills
# int ATTACK_COST
# int attackRange
# int currentDirection
# SpriteAnimation meleeAttackAnimation
+ ImageView meleeAttackImage
+ <<Create>> BasePlayerPiece(int,int,int)
+ {abstract}boolean validAttack(int,int)
+ {abstract}void attack(BaseMonsterPiece)
+ {abstract}boolean validMove(int,int)
# void setupAnimation(String,int,int,int,int)
+ {abstract}void startTurn()
+ {abstract}void endTurn()
+ void takeDamage(int)
+ void decreaseMana(int)
+ void decreaseActionPoint(int)
+ void changeDirection(int)
+ int getCurrentHealth()
+ int getMaxHealth()
+ void setCurrentHealth(int)
+ void setMaxHealth(int)
+ int getAttackDamage()
+ void setAttackDamage(int)
+ int getAttackRange()
+ int getCurrentMana()
+ void setCurrentMana(int)
+ int getMaxMana()
+ void setMaxMana(int)
+ void setCurrentActionPoint(int)
+ int getCurrentActionPoint()
+ void setMaxActionPoint(int)
+ int getMaxActionPoint()
+ void setCanAct(boolean)
+ boolean canAct()
+ BaseSkill[] getSkills()
+ boolean isAlive()
+ void onDeath()
}
class pieces.enemies.Tiny {
- State currentState
- double ATTACK_RANGE
- int VISION_RANGE
- int ATTACK_DAMAGE
+ <<Create>> Tiny()
+ void updateState()
+ void performAction()
- void chasePlayer()
+ void attack(BasePlayerPiece)
- void moveTowardsPlayer()
}
enum pieces.enemies.State {
+  NEUTRAL_ROAMING
+  AGGRESSIVE
}
class pieces.player.Knight {
+ <<Create>> Knight(int,int,int)
+ void moveWithTransition(int,int)
+ boolean validMove(int,int)
+ boolean validAttack(int,int)
+ void startTurn()
+ void endTurn()
+ void attack(BaseMonsterPiece)
+ void takeDamage(int)
}
class pieces.enemies.Zombie {
- State currentState
- double ATTACK_RANGE
- int VISION_RANGE
- int ATTACK_DAMAGE
+ <<Create>> Zombie()
+ void updateState()
+ void performAction()
- void chasePlayer()
+ void attack(BasePlayerPiece)
- void moveTowardsPlayer()
}
enum pieces.enemies.State {
+  NEUTRAL_ROAMING
+  AGGRESSIVE
}
interface pieces.BaseStatus {
~ int getCurrentHealth()
~ void setCurrentHealth(int)
~ int getMaxHealth()
~ void setMaxHealth(int)
~ void takeDamage(int)
~ boolean isAlive()
~ void onDeath()
}
class pieces.npcs.BaseNpcPiece {
- Map<String,Object> dialogues
+ <<Create>> BaseNpcPiece(int)
# void importDialogues(String)
+ void talk(String,String)
+ void talk(String)
+ void setupAnimation(String,int,int,int,int)
}
class pieces.wall.BaseWallPiece {
- TileMap tileMap
+ <<Create>> BaseWallPiece(int,int)
+ TileMap getTileMap()
}
class pieces.enemies.Bomb {
- Bomb.State currentState
- int timeLeft
+ <<Create>> Bomb()
+ void attack(BasePlayerPiece)
+ void performAction()
- void countingDownTimer()
- void explode()
+ void updateState()
}
enum pieces.enemies.State {
+  COUNTDOWN
+  EXPLODE
}
class pieces.enemies.Skeleton {
- Skeleton.State currentState
- double ATTACK_RANGE
- int VISION_RANGE
- int ATTACK_DAMAGE
+ <<Create>> Skeleton()
+ void updateState()
+ void performAction()
- void chasePlayer()
+ void attack(BasePlayerPiece)
}
enum pieces.enemies.State {
+  NEUTRAL_ROAMING
+  AGGRESSIVE
}


pieces.enemies.BaseMonsterPiece <|-- pieces.enemies.Vampire
pieces.enemies.BaseMonsterPiece <|-- pieces.enemies.Bomber
pieces.enemies.BaseMonsterPiece <|-- pieces.enemies.Necromancer
pieces.npcs.BaseNpcPiece <|-- pieces.npcs.Dealer
pieces.BaseStatus <|.. pieces.enemies.BaseMonsterPiece
pieces.BasePiece <|-- pieces.enemies.BaseMonsterPiece
pieces.BaseStatus <|.. pieces.player.BasePlayerPiece
pieces.BasePiece <|-- pieces.player.BasePlayerPiece
pieces.enemies.BaseMonsterPiece <|-- pieces.enemies.Tiny
pieces.player.BasePlayerPiece <|-- pieces.player.Knight
pieces.enemies.BaseMonsterPiece <|-- pieces.enemies.Zombie
pieces.BasePiece <|-- pieces.npcs.BaseNpcPiece
pieces.BasePiece <|-- pieces.wall.BaseWallPiece
pieces.enemies.BaseMonsterPiece <|-- pieces.enemies.Bomb
pieces.enemies.BaseMonsterPiece <|-- pieces.enemies.Skeleton
@enduml